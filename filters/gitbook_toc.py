""" 
Panflute filter that creates a toc for the gitbook template
"""

import panflute as pf
import sys
from collections import OrderedDict
import lxml.etree as etree

def prepare(doc):
  doc.toc_dict = OrderedDict()
  doc.toc_depth = int(doc.get_metadata('toc-depth', default=3))
  # use indexing from 1 because looks better
  doc.counter_all = [0,]*doc.toc_depth
  doc.counter_num = [0,]*doc.toc_depth 

def action(elem, doc):
  if isinstance(elem, pf.Header) and elem.level <= doc.toc_depth:
    str_content = pf.stringify(elem)
    # remove List of Listings/Headers/Tables
    if "List of" in str_content:
      pass
    else:
      # tuple indexing start from 0
      index_pos = elem.level
      # increment all counter (set to one to right of changed number)
      doc.counter_all[index_pos-1] += 1
      doc.counter_all[index_pos:] = ([0,]*doc.toc_depth)[index_pos:]
      key = tuple(doc.counter_all[:index_pos])  
      numbered = False if "unnumbered" in elem.classes else True
      doc.toc_dict[key] = {"identifier" :  elem.identifier,
                           "content" : str_content,
                           "level" : elem.level,
                           "numbered" : numbered}
      if numbered:
        # increment num counter (set to one to right of changed number)
        doc.counter_num[index_pos-1] += 1
        doc.counter_num[index_pos:] = ([0,]*doc.toc_depth)[index_pos:]   
        doc.toc_dict[key]["counter_num"] = doc.counter_num[:index_pos]       

def finalize(doc):
  
  # this probably will not work with an arbitrary TOC
  # e.g. those jumping from 1 to 1.1.1
  ul_sum= etree.Element("ul", attrib={"class" : "summary"})
  comment = etree.Comment("autogenerated using Pandoc filter")
  ul_sum.append(comment)
  li = etree.Element("li")
  ul_sum.append(li)
  a_top = etree.Element("a",attrib={"href" : "./"} )
  li.append(a_top)
  a_top.text = "pablodem thesis"
  li = etree.Element("li", attrib={"class" : "divider"})
  li.text = ""
  ul_sum.append(li)
  uls = [ul_sum]
  for key, elem in doc.toc_dict.items():
    if len(key) > len(uls):
      ul = etree.Element("ul")
      li.append(ul)
      uls.append(ul)
    elif len(key) < len(uls):
      uls = uls[:len(key)]
    li = etree.Element("li", attrib={"class" : "chapter"})
    li.set("data-path", "thesis.html")
    content = " {}".format(elem["content"])
    a = etree.Element("a", attrib={"href" : "#{}".format(elem["identifier"])})
    li.append(a)
    i_el = etree.Element("i", attrib={"class" : "fa fa-check"})
    i_el.text = ""
    a.append(i_el)
    if elem["numbered"]:
      counter_num = elem["counter_num"]
      data_level = ".".join([str(i) for i in counter_num])
      li.set("data-level", data_level)
      b_el = etree.Element("b")
      a.append(b_el)
      b_el.text = data_level
      b_el.tail = content
    else:
      li.set("data-level", "")
      i_el.tail = content
    uls[-1].append(li)

  toc_html = etree.tostring(ul_sum, encoding="unicode",pretty_print=True)
  doc.metadata["toc_html"] = pf.RawBlock(toc_html,format="html")
  del doc.toc_dict, doc.toc_depth
  
def main(doc=None):
  return pf.run_filter(action,
                       prepare=prepare,
                       finalize=finalize,
                       doc=doc) 

if __name__ == '__main__':
    main()